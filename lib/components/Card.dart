import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:flutter_tts/flutter_tts.dart';import 'package:percent_indicator/linear_percent_indicator.dart';import 'package:quickalert/quickalert.dart';import 'package:quickalert/widgets/quickalert_buttons.dart';import 'package:speech_to_text/speech_to_text.dart';class Cardp extends StatefulWidget {  // final Function(int) setLayer;  // final int layer;  final VoidCallback onNext;  Cardp({required this.onNext});  // const Card({  //   Key? key,  //   required this.setLayer,  //   required this.layer,  // }) : super(key: key);  @override  State<Cardp> createState() => _CardpState();}class _CardpState extends State<Cardp> {  final SpeechToText _speechToText = SpeechToText();  var english_word = "the book is on the table";  var hindi_word = "यह किताब अच्छी है।";  var speaking_word = "";  bool _speechEnabled = false;  String _wordsSpoken = " ";  double _confidenceLevel = 0;  bool _sucessfull = false;  String dd = "done";  FlutterTts flutterTts  = FlutterTts();  Future _speak() async {    await flutterTts.setLanguage("hi");    await flutterTts.setPitch(5);    await flutterTts.speak(hindi_word);  }  @override  void initState() {    // TODO: implement initState    super.initState();    initSpeech();    _speak();  }  void initSpeech() async {    _speechEnabled =  await _speechToText.initialize();    setState(() {    });  }  void _startListening() async{    await _speechToText.listen(onResult: _onSpeechResult);  }  void _onSpeechResult(result){    // print(result.recognizedWords);    var storage = result.recognizedWords;    setState(() {      speaking_word = storage;    });    // setState(() {    //   _wordsSpoken = "${result.recognizedWords}";    //   _confidenceLevel = result.confidence;    // });    if(storage == english_word){      print("perfect");     widget.onNext();      // QuickAlert.show(      //   context: context,      //   type: QuickAlertType.success,      //   text: 'Transaction Completed Successfully!',      // );      // setState(() {      //      //   _sucessfull = true;      // });    }  }  void _stopListening() async {    await _speechToText.stop();    setState(() {      // dd="ho gay";      QuickAlert.show(        context: context,        type: QuickAlertType.error,        title: 'Oops...',        text: 'Sorry, something went wrong',      );    });  }  @override  Widget build(BuildContext context) {    // Get screen dimensions    final screenWidth = MediaQuery.of(context).size.width;    final cardWidth = screenWidth * 0.8;    final cardAspectRatio = 1.4; // Standard playing card aspect ratio    final cardHeight = cardWidth * cardAspectRatio;    // Calculate sizes proportional to card dimensions    final cornerSize = cardWidth * 0.15;    final centerSize = cardWidth * 0.3;    return Scaffold(      body: Column(        children: [          // Header with back button, progress bar and menu button          Container(            width: double.infinity,            color: Colors.black,            child: SafeArea(              bottom: false,              child: Padding(                padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10.0),                child: Row(                  mainAxisAlignment: MainAxisAlignment.spaceBetween,                  children: [                    Container(                      width: 40,                      height: 40,                      decoration: BoxDecoration(                        color: Colors.white.withOpacity(0.2),                        borderRadius: BorderRadius.circular(20),                      ),                      child: const Icon(                        Icons.close_sharp,                        color: Colors.white,                        size: 24,                      ),                    ),                    Container(child:                    new LinearPercentIndicator(                      width: 250.0,                      lineHeight: 8.0,                      percent: 0.7,                      backgroundColor: Colors.white,                      progressColor: Colors.blue,                      barRadius: Radius.circular(10.0),                      animation: true,                      animationDuration: 1000,                      curve: Curves.easeInOut,                      animateFromLastPercent: true,                    ),                    ),                    Container(                      width: 40,                      height: 40,                      decoration: BoxDecoration(                        color: Colors.white.withOpacity(0.2),                        borderRadius: BorderRadius.circular(20),                      ),                      child: const Icon(                        Icons.grid_view,                        color: Colors.white,                        size: 24,                      ),                    ),                    // Back button                    // Progress indicators                    // Menu button                  ],                ),              ),            ),          ),          // Main content area with card          Expanded(            child: Container(              color: Colors.black,              width: double.infinity,              child: Center(                child: Container(                  width: cardWidth,                  height: cardHeight,                  decoration: BoxDecoration(                    color: Colors.white,                    borderRadius: BorderRadius.circular(10),                    boxShadow: [                      BoxShadow(                        color: Colors.black.withOpacity(0.25),                        blurRadius: 3.84,                        offset: const Offset(0, 2),                      ),                    ],                  ),                  child: Stack(                    children: [                      // Title of the card                      Positioned(                        left: cardWidth * 0.04,                        top: cardHeight * 0.05,                        child: const Text(                          'Speak English',                          style: TextStyle(                            fontSize: 24,                            fontWeight: FontWeight.bold,                            decoration: TextDecoration.underline,                          ),                        ),                      ),                      // Card content                      Positioned(                        top: cardHeight * 0.4,                        left: cardWidth * 0.05,                        child: Container(                          width: cardWidth * 0.9,                          child: Column(                            crossAxisAlignment: CrossAxisAlignment.start,                            children: [                              Text(english_word,                                style: TextStyle(                                  fontSize: 27,                                  fontWeight: FontWeight.bold,                                  color: Colors.black,                                ),                              ),                              const SizedBox(height: 10),                               Text(                               hindi_word,                                style: TextStyle(                                  fontSize: 17,                                  color: Colors.grey,                                ),                              ),                            ],                          ),                        ),                      ),                    ],                  ),                ),              ),            ),          ),          if(speaking_word.length > 2)             Container(            width: double.infinity,          height: 70,          color: Colors.black,          child:   Center(            child: Container(  // child: QuickAlertButtons(options: options)),            child: Text('${speaking_word}',style: TextStyle(fontSize: 30,color: Colors.white),)),          ),          ) ,          // Bottom controls with speaker and mic buttons          Container(            color: Colors.black,            width: double.infinity,            padding: const EdgeInsets.symmetric(vertical: 20),            child: Row(              mainAxisAlignment: MainAxisAlignment.center,              children: [                // Speaker button                Container(                  width: 59,                  height: 60,                  decoration: BoxDecoration(                    color: const Color(0xFF333333),                    borderRadius: BorderRadius.circular(27),                  ),                  child: IconButton(                    icon: const Icon(Icons.volume_up, color: Colors.white),                    onPressed: () {_speak();},                    iconSize: 22,                  ),                ),                const SizedBox(width: 40),                // Microphone button                Container(                  width: 75,                  height: 76,                  decoration: BoxDecoration(                    color: const Color(0xFFFF9500),                    borderRadius: BorderRadius.circular(36),                  ),                  child: IconButton(                    icon: const Icon(Icons.mic, color: Colors.white),                      onPressed: _speechToText.isListening ? _stopListening : _startListening,                    iconSize: 38,                  ),                ),                const SizedBox(width: 80),              ],            ),          ),        ],      ),    );  }  Widget _buildProgressIndicator(bool isActive) {    final screenWidth = MediaQuery.of(context).size.width;    final indicatorWidth = (screenWidth - 60) / 7;    return Container(      width: indicatorWidth,      height: 8,      decoration: BoxDecoration(        color: isActive            ? Colors.white            : Colors.white.withOpacity(0.3),        borderRadius: BorderRadius.circular(4),      ),    );  }}// Optional HeartIcon component if neededclass HeartIcon extends StatelessWidget {  final double size;  final Color color;  const HeartIcon({    Key? key,    required this.size,    required this.color,  }) : super(key: key);  @override  Widget build(BuildContext context) {    return Container(      width: size,      height: size,      child: CustomPaint(        painter: HeartPainter(color: color),        size: Size(size, size),      ),    );  }}class HeartPainter extends CustomPainter {  final Color color;  HeartPainter({required this.color});  @override  void paint(Canvas canvas, Size size) {    Paint paint = Paint()      ..color = color      ..style = PaintingStyle.fill;    Path path = Path();    path.moveTo(size.width / 2, size.height / 5);    // Top left curve    path.cubicTo(        5 * size.width / 14, 0,        0, size.height / 15,        size.width / 4, 2 * size.height / 5    );    // Bottom curve    path.cubicTo(        size.width / 2, 3 * size.height / 4,        3 * size.width / 4, 2 * size.height / 5,        size.width / 2, 4 * size.height / 5    );    // Top right curve    path.cubicTo(        3 * size.width / 4, 2 * size.height / 5,        size.width, size.height / 15,        9 * size.width / 14, 0    );    // Complete the heart shape    path.close();    canvas.drawPath(path, paint);  }  @override  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;}